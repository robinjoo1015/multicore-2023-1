/*
thrust == vector

// size 4 host vector
thrust::host_vector<int> H(4); H=[-,-,-,-]
// resize
H.resize(2); H=[-,-]
// copy host vector to device vector
thrust::device_vector<int> D = H;

// automatically deleted when function returns

// initialize all ten integers to 1
thrust::device_vector<int> D(10, 1); -> [1,1,1,1,1,1,1,1,1,1]
// set first seven elements to 9
thrust::fill(D.begin(), D.begin() + 7, 9); -> [9,9,9,9,9,9,9,1,1,1]
// initialize with first five elements of D
thrust::host_vector<int> H(D.begin(), D.begin() + 5); -> [9,9,9,9,9]
// set elements of H to 0, 1, 2, 3, ...
thrust::sequence(H.begin(), H.end()); -> H=[0,1,2,3,4]
// copy all of H (back?) to the beginning of D
thrust::copy(H.begin(), H.end(), D.begin()); -> D=[0,1,2,3,4,9,9,1,1,1]

transform, reduce, scan, ...

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<1>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Transformation: [x0, x1, x2, ...] ->f()-> [f(x0), f(x1), f(x2), ...]

thrust::device_vector<int> X(10);
thrust::device_vector<int> Y(10);
thrust::device_vector<int> Z(10);
thrust::sequence(X.begin(), X.end()); -> X=[0,1,2,3,4,5,6,7,8,9]

// compute Y = -X
thrust::transform(X.begin(), X.end(), Y.begin(), thrust::negate<int>());
// X.begin(), X.end() : input
// Y.begin() : output
// thrust::negate<int>() : operation function
// -> Y=[0,-1,-2,-3,-4,-5,-6,-7,-8,-9]

thrust::fill(Z.begin(), Z.end(), 2); -> Z=[2,2,2,2,2,2,2,2,2,2]
// compute Y = X mod 2
thrust::transform(X.begin(), X.end(), Z.begin(), Y.begin(), thrust::modulus<int>());
// X.begin(), X.end() : input 1
// Z.begin() : input 2
// Y.begin() : output
// thrust::modulus<int>() : operation function
// -> Y=[0,1,0,1,0,1,0,1,0,1]

// replace all ones to tens
thrust::replace(Y.begin(), Y.end(), 1, 10); -> Y=[0,10,0,10,0,10,0,10,0,10]

// print 
thrust::copy(Y.begin(), Y.end(), std::ostream_iterator<int>(std::cout, "\n"));

struct saxpy_functor
{
    const float a;
    saxpy_functor(float _a) : a(_a) {}
    __host__ __device__ float operator() (const float& x, const float& y) const {
        return a * x + y;
    }
}
void saxpy_fast(float A, thrust::device_vector<float>& X, thrust::device_vector<float>& Y)
{
    thrust::transform(X.begin(), X.end(), Y.begin(), Y.begin(), saxpy_functor(A));
    // X.begin(), X.end() : input 1
    // Y.begin() : input 2
    // Y.begin() : output
    saxpy_functor(A) : functor (function object)
}


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<2>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reduction : [x1, x2, x3, ...] -> x1+x2+x3+... (any operator +, -, *, ...)

int sum = thrust::reduce(D.begin(), D.end(), (int) 0, thrust::plus<int>());
// D.begin(), D.end() : input
// (int) 0 : init value (default 0 -> abbreviate)
// thrust::plut<int>() : operator (default plus -> abbreviate)


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<3>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Transform+Reduce

square<float> unary_op;
thruust::plus<float> binary_op;
float init = 0;

float norm = std::sqrt( thrust::transform_reduce(d_x.begin(), d_x.end(), unary_op, init, binary_op) );
// d_x.begin(), d_x.end() : input
// unary_op : transform = square
// init : reduction init value = 0
// binary_op : reduction operation = plus


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<4>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Prefix-Sum / Scan : [0,1,2,3,4,...] -> [0,0+1,0+1+2,0+1+2+3,0+1+2+3+4,...]

int data[6] = {1,0,1,2,3,4};
thrust::inclusive_scan(data, data+6, data); -> data=[1,1,3,5,6,9]

int data[6] = {1,0,2,2,1,3};
thrust::exclusive_scan(data, data+6, data); -> data=[0,1,1,3,5,6]
// {0, 1, 1+0, 1+0+2, 1+0+2+2, 1+0+2+2+1}

*/